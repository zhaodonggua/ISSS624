---
title: "In-class Exercise 2: Spatial Weights - sfdep methods"
format: html
editor: visual
---

## **Getting started**

### **Installing and Loading the R Packages**

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, knitr)

```

## **The Data**

### **Importing geospatial data**

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### **Importing attribute table**

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### **Combining both data frame by using left join**

```{r}
hunan_GDPPC <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

### **Plotting a choropleth map**

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC", 
          style = "quantile", 
          palette = "Blues",
          title = "GDPPC") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of GDP per capita by district, Hunan Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```

## **Deriving Contiguity Spatial Weights**

### **Identifying contiguity neighbours: Queen\'s method**

```{r}
nb_queen <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

```{r}
summary(nb_queen$nb)
```

```{r}
nb_queen
```

```{r}
kable(head(nb_queen,
           n=10))
```

### **Identify contiguity neighbours: Rooks\' method**

```{r}
nb_rook <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry,
                            queen = FALSE),
         .before = 1)
```

### **Identifying higher order neighbors**

```{r}
nb2_queen <-  hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         nb2 = st_nb_lag_cumul(nb, 2),
         .before = 1)
```

```{r}
nb2_queen

```

## **Deriving contiguity weights: Queen\'s method**

### **Deriving contiguity weights: Queen\'s method**

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

```{r}
wm_q

```

## **Distance-based Weights**

### **Deriving fixed distance weights**

```{r}
geo <- sf::st_geometry(hunan_GDPPC)
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

```{r}
summary(dists)

```

```{r}
wm_fd <- hunan_GDPPC %>%
  mutate(nb = st_dist_band(geometry,
                           upper = 66),
               wt = st_weights(nb),
               .before = 1)
```

### **Deriving adaptive distance weights**

```{r}
wm_ad <- hunan_GDPPC %>% 
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

### **Calculate inverse distance weights**

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```
